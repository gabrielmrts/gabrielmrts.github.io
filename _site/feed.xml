<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-18T23:28:15-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Low Level Pirate</title><author><name>Gabriel Martins</name><email>gabrielmrts@yahoo.com</email></author><entry><title type="html">Classic Crackme 0x100 - Parte 1</title><link href="http://localhost:4000/posts/classic-crackme/" rel="alternate" type="text/html" title="Classic Crackme 0x100 - Parte 1" /><published>2024-08-18T00:00:00-03:00</published><updated>2024-08-18T00:00:00-03:00</updated><id>http://localhost:4000/posts/classic-crackme</id><content type="html" xml:base="http://localhost:4000/posts/classic-crackme/"><![CDATA[<p>Nesse post irei fazer um desafio CTF de engenharia reversa. 
Estou usando o site <code class="language-plaintext highlighter-rouge">picoctf</code>.</p>

<p>Temos acesso a um binário chamado <code class="language-plaintext highlighter-rouge">crackme100</code>, então vamos começar por ele.</p>

<p>Rodando um <code class="language-plaintext highlighter-rouge">file crackme100</code> temos:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crackme100: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=a064bd4ed6605f6b04abb44282ecc10fedc67684, for GNU/Linux 3.2.0, with debug_info, not stripped
</code></pre></div></div>

<p>Já temos algumas informações sobre o que é esse binário, então vou partir para o <code class="language-plaintext highlighter-rouge">Ghidra</code>, uma ferramente open-source poderosa para fazer engenharia reversa.</p>

<p><img src="/assets/imgs/1.png" alt="Print" /></p>

<p>A instrução que faz esse <code class="language-plaintext highlighter-rouge">if (iVar2 == 0)</code> na linha 87:</p>

<p><img src="/assets/imgs/2.png" alt="Print" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TEST    EAX, EAX
JNZ     LAB_00401389
</code></pre></div></div>

<p>Onde <code class="language-plaintext highlighter-rouge">JNZ</code> (JUMP IF NOT ZERO) da um <code class="language-plaintext highlighter-rouge">JUMP</code> para o label <code class="language-plaintext highlighter-rouge">LAB_00401389</code> que coloca a mensagem de “FAILED!” no registrador <code class="language-plaintext highlighter-rouge">EDI</code>, e depois chama <code class="language-plaintext highlighter-rouge">puts</code>.</p>

<p>Se a flag estivesse no binário (o que não está), poderíamos modificar o binário para fazer ele mostrar a flag mesmo se a senha estivesse incorreta. Simplesmente alterando a instrução <code class="language-plaintext highlighter-rouge">JNZ</code> para <code class="language-plaintext highlighter-rouge">JZ</code>.</p>

<p>Qual a lógica nisso?</p>

<p>A linha <code class="language-plaintext highlighter-rouge">iVar2 = memcmp(input,output,(long)(int)sVar3);</code> chama o <code class="language-plaintext highlighter-rouge">memcmp</code> para comparar se o input é igual o output (a senha propriamente dita), ele retorna 0 caso seja igual, e valores diferentes de 0 caso seja diferente.</p>

<p>O retorno do memcmp é armazenado no registrador EAX.</p>

<p>Na linha <code class="language-plaintext highlighter-rouge">TEST EAX, EAX</code> que é equivalente a <code class="language-plaintext highlighter-rouge">EAX AND EAX</code>, em outras palavras, se o retorno do memcmp que é armazenado em EAX, for 0 (zero), significa que o input e output são iguais, se não for 0, significa que são diferentes.</p>

<p>O resultado da instrução TEST é armazenada no zero flag ZF.</p>

<p>Nesse caso se inserirmos uma senha errada, TEST irá atualizar o ZF para 0 (por que o resultado do memcmp não resultou em 0). E isso irá fazer com que <code class="language-plaintext highlighter-rouge">JNZ LAB_00401389</code> seja executado.</p>

<p>Por outro lado, se o retorno de memcmp for 0, ZF será 1, e <code class="language-plaintext highlighter-rouge">JNZ LAB_00401389</code> não será executado.</p>

<p>Dito isso, nós podemos usar a funcionalidade <code class="language-plaintext highlighter-rouge">Patch Instruction</code> do Ghidra, e alterar o JNZ para JZ (Jump if Zero). Com isso, vamos ter o efeito oposto, se ZF for 0 (se errarmos a senha).</p>

<p><img src="/assets/imgs/3.png" alt="Print" /></p>

<p>Se gerarmos um novo binário com essa instrução alterada, podemos colocar a senha incorreta que ele nos traria a flag.</p>

<p><img src="/assets/imgs/4.png" alt="Print" /></p>

<p>Infelizmente nesse caso, a flag real está em um servidor remoto ao qual o picoctf disponibiliza para o desafio.</p>

<p>Então vamos precisar entender como a flag é feita.</p>

<p>No código decompilado, nós temos um array de caracteres chamado output, que possui o tamanho 51. <code class="language-plaintext highlighter-rouge">char output [51];</code></p>

<p>Mas a dor de cabeça vai ser entender o que esse for tá fazendo. Descobrindo isso, conseguimos a flag. Então vamos começar.</p>

<p>Continua na parte 2.</p>]]></content><author><name>Gabriel Martins</name><email>gabrielmrts@yahoo.com</email></author><category term="ctf" /><category term="picoctf" /><category term="reverse engineering" /><summary type="html"><![CDATA[Nesse post irei fazer um desafio CTF de engenharia reversa. Estou usando o site picoctf.]]></summary></entry><entry><title type="html">Jekyll Markdown</title><link href="http://localhost:4000/posts/jekyll-markdown/" rel="alternate" type="text/html" title="Jekyll Markdown" /><published>2021-11-04T00:00:00-03:00</published><updated>2021-11-04T00:00:00-03:00</updated><id>http://localhost:4000/posts/jekyll-markdown</id><content type="html" xml:base="http://localhost:4000/posts/jekyll-markdown/"><![CDATA[<p>Text can be <strong>bold</strong>, <em>italic</em>, <del>strikethrough</del> or <code class="language-plaintext highlighter-rouge">keyword</code></p>

<p><a href="./another-page.html">Link to another page</a>.</p>

<p>There should be whitespace between paragraphs.</p>

<p>There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project.</p>

<h4 id="image">Image</h4>

<p>Images can be clicked to enlarge :)</p>

<p><img src="https://picsum.photos/1366/768" alt="Dummy Image 1" />
<img src="https://picsum.photos/1200/400" alt="Dummy Image 2" /></p>

<h1 id="header-1">Header 1</h1>

<p>This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.</p>

<h2 id="header-2">Header 2</h2>

<blockquote>
  <p>This is a blockquote following a header.</p>

  <p>When something is important enough, you do it even if the odds are not in your favor.</p>
</blockquote>

<h3 id="header-3">Header 3</h3>

<blockquote>
  <p>This is another blockquote following header 3</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Javascript code with syntax highlighting.</span>
<span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">lang</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">dateformat</span><span class="p">.</span><span class="nx">i18n</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./lang/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">l</span><span class="p">);</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ruby code with syntax highlighting</span>
<span class="no">GitHubPages</span><span class="o">::</span><span class="no">Dependencies</span><span class="p">.</span><span class="nf">gems</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="p">,</span> <span class="n">version</span><span class="o">|</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">add_dependency</span><span class="p">(</span><span class="n">gem</span><span class="p">,</span> <span class="s2">"= </span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="header-4">Header 4</h4>

<ul>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
</ul>

<h5 id="header-5">Header 5</h5>

<ol>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
</ol>

<h6 id="header-6">Header 6</h6>

<table>
  <thead>
    <tr>
      <th style="text-align: left">head1</th>
      <th style="text-align: left">head two</th>
      <th style="text-align: left">three</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good swedish fish</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">out of stock</td>
      <td style="text-align: left">good and plenty</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">oreos</code></td>
      <td style="text-align: left">hmm</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">zoute</code> drop</td>
      <td style="text-align: left">yumm</td>
    </tr>
  </tbody>
</table>

<h3 id="theres-a-horizontal-rule-below-this">There’s a horizontal rule below this.</h3>

<hr />

<h3 id="here-is-an-unordered-list">Here is an unordered list:</h3>

<ul>
  <li>Item foo</li>
  <li>Item bar</li>
  <li>Item baz</li>
  <li>Item zip</li>
</ul>

<h3 id="and-an-ordered-list">And an ordered list:</h3>

<ol>
  <li>Item one
    <ol>
      <li>Item one</li>
      <li>Item two
        <ol>
          <li>Item one</li>
          <li>Item two</li>
          <li>Item three</li>
        </ol>
      </li>
      <li>Item three</li>
    </ol>
  </li>
  <li>Item four</li>
  <li>Item two</li>
  <li>Item three</li>
  <li>Item four</li>
</ol>

<h3 id="and-a-nested-list">And a nested list:</h3>

<ul>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item
        <ul>
          <li>level 3 item</li>
          <li>level 3 item</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long.
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The final element.
</code></pre></div></div>]]></content><author><name>Gabriel Martins</name><email>gabrielmrts@yahoo.com</email></author><category term="jekyll" /><category term="Test Post" /><category term="first post" /><summary type="html"><![CDATA[Text can be bold, italic, strikethrough or keyword]]></summary></entry><entry><title type="html">The Purpose of Education</title><link href="http://localhost:4000/posts/the-purpose-of-education/" rel="alternate" type="text/html" title="The Purpose of Education" /><published>1948-12-12T07:18:00-03:00</published><updated>1948-12-12T07:18:00-03:00</updated><id>http://localhost:4000/posts/the-purpose-of-education</id><content type="html" xml:base="http://localhost:4000/posts/the-purpose-of-education/"><![CDATA[<p>As I engage in the so-called “bull sessions” around and about the school, I too often find that most college men have a misconception of the purpose of education. Most of the “brethren” think that education should equip them with the proper instruments of exploitation so that they can forever trample over the masses. Still others think that education should furnish them with noble ends rather than means to an end.</p>

<p><img src="https://picsum.photos/800/300" alt="alt" /></p>

<p>It seems to me that education has a two-fold function to perform in the life of man and in society: the one is utility and the other is culture. Education must enable a man to become more efficient, to achieve with increasing facility the ligitimate goals of his life.</p>

<p>Education must also train one for quick, resolute and effective thinking. To think incisively and to think for one’s self is very difficult. We are prone to let our mental life become invaded by legions of half truths, prejudices, and propaganda. At this point, I often wonder whether or not education is fulfilling its purpose. A great majority of the so-called educated people do not think logically and scientifically. Even the press, the classroom, the platform, and the pulpit in many instances do not give us objective and unbiased truths. To save man from the morass of propaganda, in my opinion, is one of the chief aims of education. Education must enable one to sift and weigh evidence, to discern the true from the false, the real from the unreal, and the facts from the fiction.</p>

<p>The function of education, therefore, is to teach one to think intensively and to think critically. But education which stops with efficiency may prove the greatest menace to society. The most dangerous criminal may be the man gifted with reason, but with no morals.</p>

<p>The late Eugene Talmadge, in my opinion, possessed one of the better minds of Georgia, or even America. Moreover, he wore the Phi Beta Kappa key. By all measuring rods, Mr. Talmadge could think critically and intensively; yet he contends that I am an inferior being. Are those the types of men we call educated?</p>

<p>We must remember that intelligence is not enough. Intelligence plus character–that is the goal of true education. The complete education gives one not only power of concentration, but worthy objectives upon which to concentrate. The broad education will, therefore, transmit to one not only the accumulated knowledge of the race but also the accumulated experience of social living.</p>

<p>If we are not careful, our colleges will produce a group of close-minded, unscientific, illogical propagandists, consumed with immoral acts. Be careful, “brethren!” Be careful, teachers!</p>]]></content><author><name>Gabriel Martins</name><email>gabrielmrts@yahoo.com</email></author><category term="fiction" /><category term="jekyll" /><summary type="html"><![CDATA[As I engage in the so-called “bull sessions” around and about the school, I too often find that most college men have a misconception of the purpose of education. Most of the “brethren” think that education should equip them with the proper instruments of exploitation so that they can forever trample over the masses. Still others think that education should furnish them with noble ends rather than means to an end.]]></summary></entry></feed>